<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Use Swagger In .NET 5.0</title>
      <link href="2021/06/12/2021-06-12-use-swagger-in-.net-5.0/"/>
      <url>2021/06/12/2021-06-12-use-swagger-in-.net-5.0/</url>
      
        <content type="html"><![CDATA[<p>在開發專案前端的過程中，使用 Swagger 讓我省了不少事，提升跟後端溝通的效率，大大減少了溝通成本，今天，要為各位做個簡單的 Swagger 介紹，以及如何在 .net 5.0 中建立 Swagger 服務。</p><h3 id="什麼是-Swagger？"><a href="#什麼是-Swagger？" class="headerlink" title="什麼是 Swagger？"></a>什麼是 Swagger？</h3><p>簡言之， Swagger 是一套可以幫助開發者與使用者管理 API 的工具。</p><h3 id="Swagger-的好處"><a href="#Swagger-的好處" class="headerlink" title="Swagger 的好處?"></a>Swagger 的好處?</h3><ul><li>Swagger 所產生的 API 文件，讓開發者可以知道有哪些 API 可以介接。</li><li>可以讓開發者知道，API 需要給那些參數，以及需要使用哪種請求方法（request methods），GET、POST、PUT、DELETE。</li><li>隨著專案規模愈大，前後端需要傳遞的資料規格也更複雜，可以幫助前後端一起制定需要傳遞的資料規格。</li><li>工程師通常都不喜歡寫文件，可以藉由 Swagger 讓工程師少寫文件。</li><li>作為 API 的測試工具，當前端打 API 失敗或是回傳預期外的資料，都可以及時跟後端溝通。</li></ul><h3 id="建立-Swagger"><a href="#建立-Swagger" class="headerlink" title="建立 Swagger"></a>建立 Swagger</h3><ol><li><p>從建立一個新專案開始<br><img src="https://lh3.google.com/u/0/d/19qs5rhUQXtaWZlxT63ShAxLhOkJ5oKhX=w1920-h881-iv1"></p></li><li><p>專案類型<br><img src="https://lh3.google.com/u/0/d/1P4ER8mNgpEukLyLM2PEQ7CAxb_G3R7Vl=w1095-h937-iv1"></p></li><li><p>設定專案名稱 與 位置<br><img src="https://lh3.google.com/u/0/d/1Hn-us1kpY85r1h-XIIFMFe76L6-UM90I=w1095-h937-iv1"></p></li><li><p>Framework 設定 .NET 5.0；打開 HTTPS；勾選「啟用 OpenAPI 支援」的話，專案會自動建立 Swagger 服務，我們這次用手動建立，取消勾選。<br><img src="https://lh3.google.com/u/0/d/1n1K5G_Ymx8m4WocD85HgQZ7M8Vt4IDmA=w1095-h937-iv1"></p></li><li><p>專案建立成後，開啟「套件管理員設定」<br><img src="https://lh3.google.com/u/0/d/1_QzCIxAoiweupYSC1ZUhScunJiSEiEO0=w1095-h937-iv1"></p></li><li><p>在套件來源中，查看是否有關於 NuGet 的套件來源，若無，按新增。<br><img src="https://lh3.google.com/u/0/d/198etUFz_rnblGRLiJoPdXc-oYF6jynub=w1095-h937-iv1"></p></li><li><p>將名稱改為：NuGet Package source (可自訂)<br>來源改為：<a href="https://api.nuget.org/v3/index.json">https://api.nuget.org/v3/index.json</a><br><img src="https://lh3.google.com/u/0/d/11Nc9pcRsWMa6SqW5JTr0AS82FFTP6a90=w1095-h937-iv1"></p></li><li><p>將套件來源改為：Nuget Package source<br>並搜尋：Swashbuckle.AspNetCore<br>安裝<br><img src="https://lh3.google.com/u/0/d/1PEDuHjQ4wjAHYgYG2KCrYhBziBYjoRdU=w1095-h937-iv1"></p></li><li><p>安裝完成<br><img src="https://lh3.google.com/u/0/d/1S8Zn3gKvzzcf5D4jYvO5XwqDaDfS7ph9=w1095-h937-iv1"></p></li></ol><h3 id="關於-Swashbuckle-AspNetCore"><a href="#關於-Swashbuckle-AspNetCore" class="headerlink" title="關於 Swashbuckle.AspNetCore"></a>關於 Swashbuckle.AspNetCore</h3><p>是一套用來文件化 .NET APIs 的 Swagger 工具。<br>主要有 3 個元件：</p><ul><li><strong>Swashbuckle.AspNetCore.SwaggerGen</strong><br>檢視 API 程式碼，並產生 Swagger Document 物件。</li><li><strong>Swashbuckle.AspNetCore.Swagger</strong><br>可將 Swagger Document 物件公開為 JSON 端點。</li><li><strong>Swashbuckle.AspNetCore.SwaggerUI</strong><br>產生 API 文件，讓使用者在網頁測試 API。<br><img src="https://lh3.google.com/u/0/d/1SqO6tJlPPZtf3sbPpgwKnsX163gs55u-=w1095-h937-iv1"></li></ul><ol><li><p>將 <code>Swashbuckle.AspNetCore.SwaggerGen</code> 加入 <code>Startup.ConfigureServices</code>應用程式服務之中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddSwaggerGen();</span><br></pre></td></tr></table></figure><p><img src="https://lh3.google.com/u/0/d/1ILPLka201VwquR370v3T7t4tKgvyxEyJ=w1095-h937-iv1"></p></li><li><p>將 <code>Swashbuckle.AspNetCore.Swagger</code> 加入 <code>Startup.Configure</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.UseSwagger();</span><br></pre></td></tr></table></figure><p><img src="https://lh3.google.com/u/0/d/1iUDDw2nhnFQRXxTCxbl-lm6kMxEIuO9j=w1095-h937-iv1"></p></li><li><p>將 <code>Swashbuckle.AspNetCore.SwaggerUI</code> 加入 <code>Startup.Configure</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.UseSwaggerUI(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    c.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;weatherForecast v1&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://lh3.google.com/u/0/d/1YazvO3AXJpQbTO8aKygApRTekBnKLNiC=w1095-h937-iv1"><br><code>SwaggerEndpoint</code> 方法的 - 第一個參數<br>為 Swagger Document 物件的 Endpoint 位置，<code>v1</code> 是 Swagger Document 物件的預設名稱，所以 <code>/swagger/v1/swagger.json</code> 是預設路由位置。<br><code>v1</code> 名稱是可以修改的，之後會補充。 - 第二個參數<br>會顯示在 Swagger UI 右上角，之後若有多個不同類別的 API，可以由此切換。<br><img src="https://lh3.google.com/u/0/d/1hgyvtCiYfngEWKXHdy5PyCyQPjNoKGda=w1095-h937-iv1"></p></li><li><p>將 <code>launchSettings.json</code> 內，專案的 <code>launchUrl</code> 改成 Swagger</p></li><li><p>選取專案，啟動 Swagger 服務 (Ctrl + F5)</p></li><li><p>Swagger UI 預設的網址路由為 <code>https://localhost:5001/swagger</code><br>顯示目前唯一的預設 API <code>WeatherForecast</code><br><img src="https://lh3.google.com/u/0/d/1Qs7xlWNktTa8idsaw_xAIr5chyG1gPdI=w1132-h969-iv1"></p></li><li><p>Swagger 所產生的 Swagger Document 物件 URL：<code>https://localhost:5001/swagger/v1/swagger.json</code><br><img src="https://lh3.google.com/u/0/d/14JbVkrTp3yhmVbD-HU37rEIt7ou_BL5f=w1132-h969-iv1"></p></li></ol><p>以上就是建立 Swagger 的流程，關於 Swagger UI 顯示的資訊，說明與修改，將另開篇幅討稐。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://blog.miniasp.com/post/2019/12/21/ASP%E2%80%A4NET-Core-3-NSwag-OpenAPI-v3">如何在 ASP․NET Core 3 完整設定 NSwag 與 OpenAPI v3 文件</a></li><li><a href="https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/getting-started-with-swashbuckle?view=aspnetcore-5.0&tabs=visual-studio">Swashbuckle 與 ASP.NET Core 使用者入門</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .Net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to custom Angular attribute directive</title>
      <link href="2021/05/22/2021-05-22-angular-directive/"/>
      <url>2021/05/22/2021-05-22-angular-directive/</url>
      
        <content type="html"><![CDATA[<p>在 Angular 中 Directive 分成三種：</p><ol><li><strong>Component</strong>：帶有 templete 的 directive。</li><li><strong>Structural Directive</strong>：可以改變 DOM 的結構，如：<code>NgIf</code>, <code>NgFor</code>, 以及 <code>NgSwitch</code></li><li><strong>Directive</strong>：可以改變 DOM ，或 component 呈現的樣式或行為，如<code>NgClass</code> , <code>NgStyle</code></li></ol><p>今天，我要為各位介紹如何使用客製化 directive 來改變一段文字的背景顏色</p><ol><li><p>首先 component 的 templete</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>萊納，你坐啊！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>建立 directive 指令，跟 component 一樣，只是將 c 改成 d (directive 簡寫)，取名 add-style</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g d add-style</span><br></pre></td></tr></table></figure></li><li><p>來看看新建立的 <code>add-style.directive.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Directive(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[addStyle]&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AddStyleDirective</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Directive</code>：這是 Decorator ，定義 class 為 directive。</li><li><code>selector</code>： 決定套用在目標( DOM 或 Component )上的屬性( Attribute )名稱，如果名稱是<code>[addStyle]</code>，那 <code>&lt;p addStyle&gt;...&lt;/p&gt;</code> 與 <code>&lt;div addStyle&gt;...&lt;/div&gt; </code> 都會吃到，但若名稱是 <code>p[addStyle]</code> ，則只有 <code>&lt;p addStyle&gt;...&lt;/p&gt;</code> 會吃到。</li></ul></li><li><p>我們可以藉由注入 <a href="https://angular.io/api/core/ElementRef">ElementRef</a>，使用 ElementRef 的 <code>nativeElement</code> 屬性取得宿主的 DOM<br><code>add-style.directive.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AddStyleDirective</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">private elRef: ElementRef</span>)</span> &#123;&#125;</span><br><span class="line">  ngOnInit(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.elRef.nativeElement);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>template</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">addStyle</span>&gt;</span>萊納，你坐啊！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>console.log</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p _ngcontent-wpy-c12=&quot;&quot; addstyle=&quot;&quot;&gt;萊納，你坐啊！&lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用 DOM API 來改變樣式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AddStyleDirective</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">private elRef: ElementRef</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.elRef.nativeElement.style.backgroundColor = <span class="string">&#x27;tomato&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>呈現如下<br><img src="https://lh3.google.com/u/0/d/1HwRL_P4i07rKB2n80HV7N1FSgrqarDfN=w1920-h937-iv1"></p><div class="note info simple"><p>上述的方式，可以讓我們很方便地取得 DOM 更改樣式，但 <a href="https://angular.io/api/core/ElementRef#properties">Angular 官方</a>並不推薦這種方式，會產生以下問題：</p><ul><li>直接訪問 DOM，會有 XSS 攻擊的風險。</li><li>會使應用( application )和渲染層( rendering )之間產生緊密耦合。這將導致無法分開兩者，也就無法將應用程式發佈到 Web Worker 中<br>因此，Angular 官方推薦使用 <a href="https://angular.io/api/core/Renderer2">Renderer2</a> ，避免以上問題。</li></ul></div></li><li><p>將 <code>Renderer2</code> 注入後，使用其 <code>setStyle</code> 函式設定樣式，優雅地解決了此問題</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AddStyleDirective</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">private elRef: ElementRef, private renderer: Renderer2</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="comment">// this.elRef.nativeElement.style.backgroundColor = &#x27;tomato&#x27;;</span></span><br><span class="line">    <span class="built_in">this</span>.renderer.setStyle(</span><br><span class="line">      <span class="built_in">this</span>.elRef.nativeElement,</span><br><span class="line">      <span class="string">&#x27;backgroundColor&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;tomato&#x27;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>但如果將設定值寫死在程式內，會非常沒有彈性，所以我們會使用<code>@Input()</code>，將屬性值從外部傳入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AddStyleDirective</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  @Input() backgroundColor: string;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">private elRef: ElementRef, private renderer: Renderer2</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.renderer.setStyle(</span><br><span class="line">      <span class="built_in">this</span>.elRef.nativeElement,</span><br><span class="line">      <span class="string">&#x27;backgroundColor&#x27;</span>,</span><br><span class="line">      <span class="built_in">this</span>.backgroundColor</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Template</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">addStyle</span> [<span class="attr">backgroundColor</span>]=<span class="string">&quot;&#x27;tomato&#x27;&quot;</span>&gt;</span>萊納，你坐啊！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>進一步優化 directive 程式碼，我們將樣式的邏輯從 <code>ngOnInit( )</code> 移到 <code>@Input( ) setter</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AddStyleDirective</span> </span>&#123;</span><br><span class="line">  @Input() <span class="keyword">set</span> <span class="title">backgroundColor</span>(<span class="params">color: string</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.renderer.setStyle(<span class="built_in">this</span>.elRef.nativeElement, <span class="string">&#x27;backgroundColor&#x27;</span>, color);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">private elRef: ElementRef, private renderer: Renderer2</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="keyword">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同樣地，template 也是有優化的空間，<code>p</code> element 包括了 <code>addStyle</code> directive 與 <code>backgroundColor</code> @Input property，這段也是可以簡化的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">addStyle</span> [<span class="attr">backgroundColor</span>]=<span class="string">&quot;&#x27;tomato&#x27;&quot;</span>&gt;</span>萊納，你坐啊！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>將 @Input 與 directive selector 設定相同的名稱(addStyle)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Input() <span class="keyword">set</span> <span class="title">addStyle</span>(<span class="params">color: string</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.renderer.setStyle(<span class="built_in">this</span>.elRef.nativeElement, <span class="string">&#x27;backgroundColor&#x27;</span>, color);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>我們可以技巧性地將第一個 addStyle 拿掉，只留下 [addStyle]</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> [<span class="attr">addStyle</span>]=<span class="string">&quot;&#x27;tomato&#x27;&quot;</span>&gt;</span>萊納，你坐啊！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以同時完成兩件事： - 不僅可以使用這個 directive - 同時，也可以使用 directive 上所設定的 @Input property</p></li><li><p>但這會有個問題，@Input property 名稱變成了 addStyle，變得不明確，我們可以使用別名來解決此問題</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Input(<span class="string">&#x27;addStyle&#x27;</span>) <span class="keyword">set</span> <span class="title">backgroundColor</span>(<span class="params">color: string</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.renderer.setStyle(<span class="built_in">this</span>.elRef.nativeElement, <span class="string">&#x27;backgroundColor&#x27;</span>, color);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如此一來，不僅可以維持原本的簡潔，更賦予@Input property 有意義的名稱，如：backgroundColor</p></li></ol><p>以上，就是製作 attribute directive 的方式，這樣做的好處在於，可將相同的顯示樣式，套用在多個 element 上，至於實作的細節，即便再怎樣複雜，我們只要專注於 directive 本身就好。</p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to custom Angular pipe</title>
      <link href="2021/05/12/2021-05-12-custom-pipes-in-angular/"/>
      <url>2021/05/12/2021-05-12-custom-pipes-in-angular/</url>
      
        <content type="html"><![CDATA[<p>Pipes 是一個簡單的涵式，主要的功能是將我們要顯示的值/數據以另一種型式呈現，內建的 pipes 功能有大/小寫轉換、貨幣轉成本地格式、數字轉百分比、日期格式轉換，或是將值轉換成 JSON 格式，等等….</p><p>這些內建 pipes 最大的特點：</p><ul><li>可以直接在 Template 中使用，無須在 Component 內撰寫轉換邏輯。</li><li>同樣的 pipe ，可以重複使用在不同的地方。</li></ul><p><a href="https://angular.tw/api/common#pipes">內建的 pipes</a>，已經可以解決大部分的需求，但專案是多變的，客戶會提出怎樣的需求，我們通常無法左右，若轉換需求內建 Pipes 辦不到，且很多地方會用到，難道只能靠共用函式處理嗎？其實，我們可以使用更優雅的方式解決，以下我就來示範如何客製化 Pipe 元件。</p><p>目前有個情境是這樣的：將英哩轉公里。</p><ol><li><p>建立新專案</p></li><li><p><code>app.component.html</code>，範本如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>英里(mile)：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> (<span class="attr">input</span>)=<span class="string">&quot;onConvert($event.target.value)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">公里(km)：&#123;&#123; distance &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p> <code>app.component.ts</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  distance = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">onConvert</span>(<span class="params">value: string</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.distance = +value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>呈現結果：<br><img src="https://lh3.google.com/u/0/d/1KSthRsPysuJ1IUyiHhojnICysnhGbKX4=w1920-h937-iv1"></p></li><li><p>使用 <code>Angular CLI</code> 建立新的 <code>pipe</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g pipe <span class="built_in">convert</span> --skip-tests</span><br></pre></td></tr></table></figure><p><code>g</code> – generate<br><code>pipe</code> – 建立的類別為 pipe<br><code>convert</code> – 自訂 pipe 的名稱<br><code>skip-tests</code> – 不需要測試檔</p></li><li><p>Angular 會自動將 pipe 加入到根模組(<code>app.module.ts</code>)的 <code>declarations</code>陣列</p><div class="note info simple"><p><a href="https://angular.io/guide/bootstrapping#the-declarations-array">declarations 是什麼？</a></p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@NgModule(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    ConvertPipe</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    BrowserModule</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">  <span class="attr">bootstrap</span>: [AppComponent]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>檢視新增的 <code>convert.pipe.ts</code> 結構</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Pipe(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;convert&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ConvertPipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  transform(value: unknown, ...args: unknown[]): unknown &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Pipe</code>： 這是 <code>decorator</code>，將此 class 標記為 pipe。<br><code>PipeTransform</code>：讓 class 實作此 <code>PipeTransform</code> 介面，呼叫此介面的 <code>transform()</code> 函式，執行轉換。<br><code>transform()</code>：轉換函式，該函式會將綁定的值，作為第一個引數，也就是 Template 中的 <code>distance</code>，並回傳轉換後的值。</p></li><li><p>在 <code>transform()</code> 內實現如何轉換：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">transform(value: number, ...args: string[]): unknown &#123;</span><br><span class="line">  <span class="keyword">return</span> value * <span class="number">1.06</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我們將參數 value 的型別，由 <code>unknown</code> 改為 <code>number</code>。</p><div class="note info simple"><p><a href="https://abstreamace.com/sglab/2021/05/06/typescript-%e4%b8%ad%e7%9a%84-any-%e5%92%8c-unknown/?fbclid=IwAR1t-VVVt4TsyBfv-AHDb9aJ_Qy-IBk0zqFDWyeX3DcMZpp27jUNDgPIL9Q">關於 any 和 unknown 的差異可以參考此篇</a></p></div></li><li><p>如同 <code>@Component</code> 的 <code>selector</code> 一樣，在 Template 找到 <code>@Pipe</code> 的 <code>name</code> ，我們就可以使用客製化 pipe：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">公里(km)：&#123;&#123; distance | convert &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>結果：<br><img src="https://lh3.google.com/u/0/d/1xm8hTBi39C0vP96y63doeFUeH3IrWl6Q=w1920-h937-iv1"></p></li><li><p>如果需求改成可以將將英哩轉公里、碼、呎，那該如何判斷需轉成何種單位？這時會需要第二個參數(<strong>…args</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">transform</span>(<span class="params">value: number, ...args: string[]</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>…args 是陣列型別，我們改成字串陣列。<br>如果 pipe 接受多個參數，需使用冒號(：)隔開</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">公里(km)：&#123;&#123; distance | convert: &quot;km&quot;:&quot;yd&quot; &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>輸入的引數會以陣列的形式呈現<br><img src="https://lh3.google.com/u/0/d/1ScBCNoU8DHheuIAG2Q1ExFLH7LR4dHWr=w1118-h937-iv1"></p></li><li><p>第二個參數，我們使用字串即可，再搭配 switch 篩選單位換算<br><code>convert.pipe.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">transform</span>(<span class="params">value: number, unit: string</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (unit) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;km&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> value * <span class="number">1.60935</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;yd&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> value * <span class="number">1760</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ft&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> value * <span class="number">5280</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>app.component.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>英里(mile)：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> (<span class="attr">input</span>)=<span class="string">&quot;onConvert($event.target.value)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">公里(km)：&#123;&#123; distance | convert: &quot;km&quot; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">碼(yd)：&#123;&#123; distance | convert: &quot;yd&quot; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">英呎(ft)：&#123;&#123; distance | convert: &quot;ft&quot; &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>結果：<br><img src="https://lh3.google.com/u/0/d/1t5T1vUuNqgl7FKnRikvjyOSKFTeX5jE3=w1920-h937-iv1"></p></li></ol><p>以上就是客製化 pipe 的示範，</p><div class="note success simple"><p>優點：</p><ul><li>可以在不同地方共用同一個 pipe，不須再撰寫重複邏輯。</li><li>若是複雜的邏輯，pipe 可以將邏輯抽出來，簡化 component 內的程式碼，讓 component 更好維護。</li></ul></div>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
          <category> Pipes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 JavaScript 中使用 switch(true)</title>
      <link href="2021/05/08/2021-05-08-javascript-switch/"/>
      <url>2021/05/08/2021-05-08-javascript-switch/</url>
      
        <content type="html"><![CDATA[<p>開發專案時，在其中的某個環節，想說除了<code>switch</code>之外，是否有更好的寫法，上網一查發現，還有<code>switch(true)</code>這種用法，感覺還蠻新奇的，第一次接觸到的人或許會對<code>expression</code>裡面怎會是<code>true</code>感到疑惑。</p><p>首先，我們先來討論以下情境：<br>請依照分數高低，分配SABCD級距。</p><p>一般的情況都會這樣寫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (score === <span class="number">100</span>) &#123;</span><br><span class="line">  level = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">90</span> &amp;&amp; score &lt; <span class="number">100</span>) &#123;</span><br><span class="line">  level = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span> &amp;&amp; score &lt; <span class="number">90</span>) &#123;</span><br><span class="line">  level = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span> &amp;&amp; score &lt; <span class="number">80</span>) &#123;</span><br><span class="line">  level = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span> &amp;&amp; score &lt; <span class="number">70</span>) &#123;</span><br><span class="line">  level = <span class="string">&#x27;D&#x27;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  level = <span class="string">&#x27;不及格&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>條件(三元)運算子</code>，更簡潔</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">level =</span><br><span class="line">  score === <span class="number">100</span> ? <span class="string">&#x27;S&#x27;</span> : score &gt;= <span class="number">90</span> &amp;&amp; score &lt; <span class="number">100</span> ?</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span> : score &gt;= <span class="number">80</span> &amp;&amp; score &lt; <span class="number">90</span> ?</span><br><span class="line">      <span class="string">&#x27;B&#x27;</span> : score &gt;= <span class="number">70</span> &amp;&amp; score &lt; <span class="number">80</span> ?</span><br><span class="line">        <span class="string">&#x27;C&#x27;</span> : score &gt;= <span class="number">60</span> &amp;&amp; score &lt; <span class="number">70</span> ?</span><br><span class="line">          <span class="string">&#x27;D&#x27;</span> : <span class="string">&#x27;不及格&#x27;</span></span><br></pre></td></tr></table></figure><p>最後是今天要討論的主題<code>switch(true)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> score === <span class="number">100</span>:</span><br><span class="line">    level = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> score &gt;= <span class="number">90</span> &amp;&amp; score &lt; <span class="number">100</span>:</span><br><span class="line">    level = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> score &gt;= <span class="number">80</span> &amp;&amp; score &lt; <span class="number">90</span>:</span><br><span class="line">    level = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> score &gt;= <span class="number">70</span> &amp;&amp; score &lt; <span class="number">80</span>:</span><br><span class="line">    level = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> score &gt;= <span class="number">60</span> &amp;&amp; score &lt; <span class="number">70</span>:</span><br><span class="line">    level = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    level = <span class="string">&#x27;不及格&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>為何<code>switch (true)</code>可行，答案其實很簡單：<code>case條件是用來跟expression匹配的</code>。</p><p><code>switch</code>不只是用來比對<code>string</code>、<code>number</code>，也可以比對<code>boolean</code>。</p><p>至於可讀性，第二種相對會比較差。</p><p>※ 另外補充，在<a href="https://ithelp.ithome.com.tw/articles/10231442">這篇文章</a>中網友提到的另一種方法，也是不錯的選擇</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> level= (<span class="function">(<span class="params">score</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> score !== <span class="string">&#x27;number&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27;NAN&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>(score===<span class="number">100</span>) <span class="keyword">return</span> <span class="string">&#x27;S&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>(score &gt;= <span class="number">90</span> &amp;&amp; score &lt; <span class="number">100</span>) <span class="keyword">return</span>  <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(score &gt;= <span class="number">80</span> &amp;&amp; score &lt; <span class="number">90</span>)  <span class="keyword">return</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(score &gt;= <span class="number">70</span> &amp;&amp; score &lt; <span class="number">80</span>)  <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(score &gt;= <span class="number">60</span> &amp;&amp; score &lt; <span class="number">70</span>)  <span class="keyword">return</span> <span class="string">&#x27;D</span></span><br><span class="line"><span class="string">    if(score &lt; 60) return &#x27;</span>F<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#125;)(100)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to backup SQL Serve DB</title>
      <link href="2021/05/02/2021-05-02-backup-sql-server-db/"/>
      <url>2021/05/02/2021-05-02-backup-sql-server-db/</url>
      
        <content type="html"><![CDATA[<h1 id="複製-SQL-Server-資料庫"><a href="#複製-SQL-Server-資料庫" class="headerlink" title="複製 SQL Server 資料庫"></a>複製 SQL Server 資料庫</h1><h2 id="1-來源資料庫按右鍵"><a href="#1-來源資料庫按右鍵" class="headerlink" title="1.  來源資料庫按右鍵"></a>1.  來源資料庫按右鍵</h2><p><img src="https://i.imgur.com/2J2TYT8.png"></p><span id="more"></span><h2 id="2-下一步"><a href="#2-下一步" class="headerlink" title="2.  下一步"></a>2.  下一步</h2><p><img src="https://i.imgur.com/I0PosXU.png"></p><h2 id="3-選取儲存位置，副檔名-bacpac"><a href="#3-選取儲存位置，副檔名-bacpac" class="headerlink" title="3.  選取儲存位置，副檔名:bacpac"></a>3.  選取儲存位置，副檔名:bacpac</h2><p><img src="https://i.imgur.com/OWnva7c.png"></p><h2 id="4-進階"><a href="#4-進階" class="headerlink" title="4.  進階"></a>4.  進階</h2><p><img src="https://i.imgur.com/Xd1361d.png"></p><h2 id="5-選取需要的table"><a href="#5-選取需要的table" class="headerlink" title="5.  選取需要的table"></a>5.  選取需要的table</h2><p><img src="https://i.imgur.com/TdOq6mH.png"></p><h2 id="6-確認後，按「完成」"><a href="#6-確認後，按「完成」" class="headerlink" title="6.  確認後，按「完成」"></a>6.  確認後，按「完成」</h2><p><img src="https://i.imgur.com/fkFfap0.png"></p><h2 id="7-完成後，關閉"><a href="#7-完成後，關閉" class="headerlink" title="7.  完成後，關閉"></a>7.  完成後，關閉</h2><p><img src="https://i.imgur.com/B7oAIYL.png"></p><h2 id="8-會在儲存位置，看到bacpac檔"><a href="#8-會在儲存位置，看到bacpac檔" class="headerlink" title="8.  會在儲存位置，看到bacpac檔"></a>8.  會在儲存位置，看到bacpac檔</h2>]]></content>
      
      
      <categories>
          
          <category> SQL Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL Server </tag>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>即時預覽 CSS flex 的好工具 - Chrome flexbox Editor</title>
      <link href="2021/05/01/2021-05-01-flexbox-editor/"/>
      <url>2021/05/01/2021-05-01-flexbox-editor/</url>
      
        <content type="html"><![CDATA[<p>新手在學習CSS flex時，首要觀念就是要釐清什麼是<code>main axis</code>與<code>cross axis</code>之外，接著就是各種排列屬性，譬如：<code>flex-direction</code>、<code>flex-wrap</code>、<code>justify-content</code>、<code>align-items</code>….等</p><p>除非對CSS flex很熟，不然版型很難一次到位，多少都會調整一下，我們一般都會在developer tools(F12)的Styles中修改CSS內容，讓瀏覽器可以即時預覽修改後的結果</p><p>但如果是複雜的版型或是新手不熟flex，改哪個屬性還要查來查去的，確實會很不方便。</p><p>好加在，Google Chrome推出的90版，提供了「flexbox Editor」，讓開發者可以透過此介面，快速的調整版型。</p><p>首先，在有使用<code>flex</code>的元素旁邊，會看到顯示<code>flex</code>的灰色按鈕，點擊後，可以看到<code>flex layout</code><br><img src="https://i.imgur.com/kfqnigd.gif"></p><p>接著，在<code>Styles</code>，<code>display: flex</code>旁，有個icon，點擊後，會顯示<code>flexbox Editor</code>，<br>此時，有數個<code>flex</code>屬性可以選擇，如第一個是<code>flex-direction</code>：<br><img src="https://i.imgur.com/S1nkxNZ.gif"></p><p><code>flex-wrap</code><br><img src="https://i.imgur.com/XfwBjW5.gif"></p><p><code>justify-content</code><br><img src="https://i.imgur.com/H51chU9.gif"></p><p><code>align-items</code><br><img src="https://i.imgur.com/bXjHxOh.gif"></p><p>在<code>Layout</code>中，會列出所有使用<code>flex</code>的元素<br><img src="https://i.imgur.com/xIsI5nn.gif"></p><p><code>color picker</code>的功能，直接點選顏色即可，無須再輸入色碼<br><img src="https://i.imgur.com/iMUFWWE.gif"></p><p>有了以上這些功能，我們就可以快速地調整不同屬性的內容，是不是很實用呢!!!</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
